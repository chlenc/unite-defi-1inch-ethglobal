import{c as C,F as G,m as k,p as t,s as N}from"./_shortw_utils-DTLadjFC.js";import"./sha3-DG6CBcqs.js";/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const q=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),w=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),j=BigInt(1),_=BigInt(2),h=(n,f)=>(n+f/_)/f;function M(n){const f=q,s=BigInt(3),a=BigInt(6),I=BigInt(11),r=BigInt(22),e=BigInt(23),i=BigInt(44),g=BigInt(88),c=n*n*n%f,o=c*c*n%f,d=t(o,s,f)*o%f,B=t(d,s,f)*o%f,x=t(B,_,f)*c%f,b=t(x,I,f)*x%f,p=t(b,r,f)*b%f,u=t(p,i,f)*p%f,P=t(u,g,f)*u%f,F=t(P,i,f)*p%f,v=t(F,s,f)*o%f,E=t(v,e,f)*b%f,S=t(E,a,f)*c%f,m=t(S,_,f);if(!l.eql(l.sqr(m),n))throw new Error("Cannot find square root");return m}const l=G(q,void 0,void 0,{sqrt:M}),O=C({a:BigInt(0),b:BigInt(7),Fp:l,n:w,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:n=>{const f=w,s=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),a=-j*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),I=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),r=s,e=BigInt("0x100000000000000000000000000000000"),i=h(r*n,f),g=h(-a*n,f);let c=k(n-i*s-g*I,f),o=k(-i*a-g*r,f);const d=c>e,B=o>e;if(d&&(c=f-c),B&&(o=f-o),c>e||o>e)throw new Error("splitScalar: Endomorphism failed, k="+n);return{k1neg:d,k1:c,k2neg:B,k2:o}}}},N);BigInt(0);O.ProjectivePoint;export{O as secp256k1};
